{"version":3,"sources":["libs/contextLib.js","LoginPage.js","NavMenu.js","QuizMain.js","App.js","index.js"],"names":["AppContext","createContext","isAuthenticated","setIsAuthenticated","auth","userData","setUserData","currentVideo","LoginPage","useContext","handleLogin","googleData","a","fetch","process","method","body","JSON","stringify","token","tokenId","headers","res","json","Logindata","requestOptions","func","data","then","response","localStorage","setItem","to","clientId","buttonText","onSuccess","onFailure","cookiePolicy","Navmenu","props","Navbar","bg","expand","className","Brand","href","src","alt","border","Toggle","Collapse","id","Nav","Link","NavDropdown","title","style","width","borderRadius","picture","Item","name","onClick","handleLogout","QuizMain","history","useHistory","questions","questionText","answerOptions","answerText","isCorrect","video_url","useParams","useState","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","totalScore","setTotalScore","participated","setParticipated","answered","setAnswered","clicked","setClicked","answeredCount","setAnsweredCount","isloading","setIsLoading","useEffect","user_id","video_id","d","error","push","answeredCountLocal","answer_count","scoreCountLocal","score_count","parseInt","length","alert","requestOptionsTotal","AnswerButton","answerOption","chkvarient","indexOf","map","v","qtnindex","ansindex","index","Button","variant","question_id","answer","is_correct","nextQuestion","setTimeout","handleAnswerOptionClick","disabled","i","key","App","userDataLocal","getItem","userDataL","parse","Provider","value","Container","basename","exact","path","component","children","render","staticContext","status","require","config","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d322ac93.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst AppContext = createContext({\n    isAuthenticated: false,\n    setIsAuthenticated: (auth) => { },\n    userData: {},\n    setUserData: () => { },\n    currentVideo: ''\n});\nexport default AppContext;\n","import React, { useContext } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { GoogleLogin } from 'react-google-login';\nimport AppContext from './libs/contextLib';\n\nconst LoginPage = () => {\n    const { isAuthenticated, setIsAuthenticated, setUserData } = useContext(AppContext);\n    const handleLogin = async googleData => {\n\n        const res = await fetch(`${process.env.REACT_APP_API_URL_AUTH}/g-auth.php`, {\n            method: \"POST\",\n            body: JSON.stringify({\n                token: googleData.tokenId\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        const Logindata = await res.json();\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ func: 'register_login_user', data: Logindata })\n        };\n        fetch(`${process.env.REACT_APP_API_URL_POST}`, requestOptions).then(response => response.json())\n            .then(data => {\n                localStorage.setItem('userdata', JSON.stringify(data.data));\n                setUserData(data.data);\n                setIsAuthenticated(true);\n            });\n        // store returned user somehow\n    }\n\n    return (\n        <>\n            {isAuthenticated ? <Redirect to=\"\" /> : <GoogleLogin\n                clientId={process.env.REACT_APP_API_GOOGLE_CLIENT_ID}\n                buttonText=\"Log in with Google\"\n                onSuccess={handleLogin}\n                onFailure={handleLogin}\n                cookiePolicy={'single_host_origin'}\n            />}\n        </>\n\n    );\n}\n\nexport default LoginPage;","import React, { useContext } from 'react';\nimport { Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport AppContext from './libs/contextLib';\nconst Navmenu = (props) => {\n    const { isAuthenticated, userData } = useContext(AppContext);\n    return (\n        <Navbar bg=\"light\" expand=\"lg\" className=\"px-2\">\n            <Navbar.Brand href=\"/\">\n                <img src=\"https://videos.oneindia.com/videos/devel/images/admin/logo.png\" alt=\"\" border=\"0\" />\n            </Navbar.Brand>\n            <Navbar.Toggle />\n            <Navbar.Collapse id=\"basic-navbar-nav\" className=\"pe-3\">\n                <Nav className=\"ms-auto\">\n                    <Nav.Link href={process.env.REACT_APP_API_BASEPATH}>Home</Nav.Link>\n\n                    {!isAuthenticated ? (<Nav.Link href={process.env.REACT_APP_API_BASEPATH + \"Login\"}>Login</Nav.Link>) : (<>\n                        <NavDropdown title={\n                            <span className=\"pull-left\">\n                                <img style={{ width: \"30px\", borderRadius: \"50%\" }}\n                                    src={userData.picture}\n                                    alt=\"user pic\"\n                                />\n                            </span>\n                        } id=\"basic-nav-dropdown\">\n                            <NavDropdown.Item>{userData.name}</NavDropdown.Item>\n                            <NavDropdown.Item onClick={props.handleLogout}>Logout</NavDropdown.Item>\n                        </NavDropdown>\n\n                    </>)}\n\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar >\n    );\n}\n\nexport default Navmenu;","import React, { useState, useEffect, useContext } from 'react';\nimport AppContext from './libs/contextLib';\nimport LoginPage from './LoginPage';\nimport { Button } from 'react-bootstrap';\nimport { useParams, useHistory } from 'react-router-dom';\nconst QuizMain = () => {\n    let history = useHistory();\n    const questions = [\n        {\n            questionText: 'What is the capital of France?',\n            answerOptions: [\n                { answerText: 'New York', isCorrect: false },\n                { answerText: 'London', isCorrect: false },\n                { answerText: 'Paris', isCorrect: true },\n                { answerText: 'Dublin', isCorrect: false },\n            ],\n        },\n        {\n            questionText: 'Who is CEO of Tesla?',\n            answerOptions: [\n                { answerText: 'Jeff Bezos', isCorrect: false },\n                { answerText: 'Elon Musk', isCorrect: true },\n                { answerText: 'Bill Gates', isCorrect: false },\n                { answerText: 'Tony Stark', isCorrect: false },\n            ],\n        },\n        {\n            questionText: 'The iPhone was created by which company?',\n            answerOptions: [\n                { answerText: 'Apple', isCorrect: true },\n                { answerText: 'Intel', isCorrect: false },\n                { answerText: 'Amazon', isCorrect: false },\n                { answerText: 'Microsoft', isCorrect: false },\n            ],\n        },\n        {\n            questionText: 'How many Harry Potter books are there?',\n            answerOptions: [\n                { answerText: '1', isCorrect: false },\n                { answerText: '4', isCorrect: false },\n                { answerText: '6', isCorrect: false },\n                { answerText: '7', isCorrect: true },\n            ],\n        },\n    ];\n    const { video_url } = useParams();\n    const { isAuthenticated, userData } = useContext(AppContext);\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [showScore, setShowScore] = useState(false);\n    const [score, setScore] = useState(0);\n    const [totalScore, setTotalScore] = useState(0);\n    const [participated, setParticipated] = useState(0);\n    const [answered, setAnswered] = useState([]);\n    const [clicked, setClicked] = useState([]);\n    const [answeredCount, setAnsweredCount] = useState(0);\n    const currentVideo = video_url;\n    const [isloading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        if (isAuthenticated) {\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    func: 'getThisVideoStatus', data: {\n                        user_id: userData.user_id,\n                        video_id: video_url\n                    }\n                })\n            };\n            fetch(`${process.env.REACT_APP_API_URL_POST}`, requestOptions).then(response => response.json())\n                .then(d => {\n                    setIsLoading(false);\n                    if (d.error === -1) {\n                        history.push(\"/\");\n                    } else {\n                        if (d.error === 0) {\n                            let answeredCountLocal = d.data.answer_count;\n                            let scoreCountLocal = d.data.score_count;\n\n                            if (scoreCountLocal !== \"\") {\n                                setScore(parseInt(scoreCountLocal));\n                            }\n                            if (answeredCountLocal !== \"\") {\n                                setAnsweredCount(parseInt(answeredCountLocal));\n                                if (answeredCountLocal < questions.length) {\n                                    setCurrentQuestion(parseInt(answeredCountLocal));\n                                } else {\n                                    setShowScore(true);\n                                }\n                            }\n                        } else {\n                            alert(\"Something Went wrong, please try again!\");\n                        }\n                    }\n                });\n            const requestOptionsTotal = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    func: 'getTotalScore', data: {\n                        user_id: userData.user_id\n                    }\n                })\n            };\n            fetch(`${process.env.REACT_APP_API_URL_POST}`, requestOptionsTotal).then(response => response.json())\n                .then(d => {\n                    if (!d.error) {\n                        setTotalScore(d.data.score_count);\n                        setParticipated(d.data.participated);\n                    }\n                });\n        }\n    }, [isAuthenticated, showScore, history]);\n\n    const handleAnswerOptionClick = (answerOption) => {\n        setClicked([...clicked, { qtnindex: currentQuestion, ansindex: answerOption.index }]);\n        if (answerOption.isCorrect) {\n            setScore(score + 1);\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                func: 'save_answer', data: {\n                    user_id: userData.user_id,\n                    question_id: currentQuestion + 1,\n                    video_id: currentVideo,\n                    answer: answerOption.index,\n                    is_correct: answerOption.isCorrect\n                }\n            })\n        };\n        fetch(`${process.env.REACT_APP_API_URL_POST}`, requestOptions).then(response => response.json())\n            .then(d => {\n                setAnsweredCount(answeredCount + 1);\n                const nextQuestion = currentQuestion + 1;\n                setAnswered([...answered, currentQuestion]);\n                if (nextQuestion < questions.length) {\n                    setTimeout(function () { setCurrentQuestion(nextQuestion); }, 1000);\n                } else {\n                    setTimeout(function () { setShowScore(true); }, 1000);\n                }\n            });\n    };\n\n\n    const AnswerButton = (answerOption) => {\n        let chkvarient = \"secondary\";\n        if (answered.indexOf(currentQuestion) > -1) {\n            if (answerOption.isCorrect) {\n                chkvarient = \"success\";\n            } else {\n                clicked.map(v => {\n                    if (v.qtnindex === currentQuestion) {\n                        if (v.ansindex === answerOption.index) {\n                            chkvarient = \"danger\"\n                        }\n                    }\n                });\n            }\n\n        } else {\n            chkvarient = \"secondary\"\n        }\n        return (\n            <Button variant={chkvarient} className=\"mb-2 w-100\" onClick={() => handleAnswerOptionClick(answerOption)} disabled={(answered.indexOf(currentQuestion) > -1) ? \"disabled\" : \"\"}> {answerOption.answerText} </Button>\n        );\n    }\n    return (\n        <>\n            {!isAuthenticated ? <LoginPage /> : isloading ? <> Please Wait., Loading..!</> :\n                <div className='row w-100'>\n                    <div className='col-md-3'></div>\n                    <div className='main col-md-6 d-flex align-items-center justify-content-center'>\n\n                        {showScore ? (<>\n                            <div className='col-md-12 text-center'>\n                                <p>You scored {score} out of {questions.length}</p>\n                                <p>Participated in {participated}</p>\n                                <p>Total scored {totalScore}</p>\n                            </div>\n                        </>) : (<>\n                            <>\n                                <div className='col-md-12 mb-2'>\n                                    <div className=''>\n                                        <span>Question {currentQuestion + 1}</span>/{questions.length}\n                                    </div>\n                                    <div className=''>{questions[currentQuestion].questionText}</div>\n                                </div>\n                                <div className='col-md-12'>\n                                    {questions[currentQuestion].answerOptions.map((answerOption, i) => (\n                                        <div className=\"w-100\" key={i}><AnswerButton index={i} {...answerOption} /></div>\n                                    ))}\n                                </div>\n                            </>\n                        </>)}\n                    </div>\n                    <div className='col-md-3'></div>\n                </div>\n            }\n        </>\n    );\n}\nexport default QuizMain;","import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container } from 'react-bootstrap';\n\nimport AppContext from './libs/contextLib';\nimport { Switch, BrowserRouter as Router, Route } from 'react-router-dom';\nimport LoginPage from './LoginPage';\nimport Navmenu from './NavMenu';\nimport QuizMain from './QuizMain';\nexport default function App() {\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n    const [userData, setUserData] = useState({});\n    useEffect(() => {\n        const userDataLocal = localStorage.getItem('userdata');\n        if (userDataLocal !== \"\" && userDataLocal !== null) {\n            setIsAuthenticated(true);\n            let userDataL = JSON.parse(userDataLocal);\n            setUserData(userDataL);\n        }\n    }, [isAuthenticated]);\n    const handleLogout = () => {\n        setIsAuthenticated(false);\n        localStorage.setItem('userdata', '');\n    }\n\n    const Home = () => {\n        return (\n            <>\n                <Container>\n                    <div className='row bg-light p-5 my-5 rounded'>\n                        <div className='col-md-12 text-center'>\n                            {isAuthenticated ? (\n                                <p>Welcome {userData.name} </p>\n                            ) : (\n                                    <>Please Login</>\n                                )}\n                        </div>\n                    </div>\n                </Container>\n            </>\n        );\n    }\n\n    const NotFound = () => {\n        return (\n            <Route render={({ staticContext }) => {\n                if (staticContext) {\n                    staticContext.status = 404;\n                }\n                return (\n                    <div>\n                        <h1>404 : Not Found</h1>\n                    </div>\n                )\n            }} />\n        );\n    };\n\n    return (\n        <AppContext.Provider value={{ isAuthenticated, setIsAuthenticated, userData, setUserData }}>\n            <Navmenu handleLogout={handleLogout} />\n            <Container className=\"containerMain\">\n                <Router basename='dwquiz'>\n                    <Switch>\n                        <Route exact path=\"/\" component={Home} />\n                        <Route exact path=\"/login\" component={LoginPage} />\n                        <Route path=\"/dw-video/:video_url\" children={<QuizMain />} />\n                        <Route component={NotFound} />\n                    </Switch>\n                </Router>\n            </Container>\n        </AppContext.Provider>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './quiz.css';\nimport App from './App';\nrequire('dotenv').config();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}