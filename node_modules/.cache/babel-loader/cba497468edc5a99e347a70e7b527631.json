{"ast":null,"code":"var _jsxFileName = \"/var/www/html/quiz-react/quiz-app/dwquiz/src/QuizMain.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport AppContext from './libs/contextLib';\nimport LoginPage from './LoginPage';\nimport { Button } from 'react-bootstrap';\nimport { useParams, useHistory } from 'react-router-dom';\n\nconst QuizMain = () => {\n  let history = useHistory();\n  const questions = [{\n    questionText: 'What is the capital of France?',\n    answerOptions: [{\n      answerText: 'New York',\n      isCorrect: false\n    }, {\n      answerText: 'London',\n      isCorrect: false\n    }, {\n      answerText: 'Paris',\n      isCorrect: true\n    }, {\n      answerText: 'Dublin',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'Who is CEO of Tesla?',\n    answerOptions: [{\n      answerText: 'Jeff Bezos',\n      isCorrect: false\n    }, {\n      answerText: 'Elon Musk',\n      isCorrect: true\n    }, {\n      answerText: 'Bill Gates',\n      isCorrect: false\n    }, {\n      answerText: 'Tony Stark',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'The iPhone was created by which company?',\n    answerOptions: [{\n      answerText: 'Apple',\n      isCorrect: true\n    }, {\n      answerText: 'Intel',\n      isCorrect: false\n    }, {\n      answerText: 'Amazon',\n      isCorrect: false\n    }, {\n      answerText: 'Microsoft',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'How many Harry Potter books are there?',\n    answerOptions: [{\n      answerText: '1',\n      isCorrect: false\n    }, {\n      answerText: '4',\n      isCorrect: false\n    }, {\n      answerText: '6',\n      isCorrect: false\n    }, {\n      answerText: '7',\n      isCorrect: true\n    }]\n  }];\n  const {\n    video_url\n  } = useParams();\n  const {\n    isAuthenticated,\n    userData\n  } = useContext(AppContext);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [totalScore, setTotalScore] = useState(0);\n  const [participated, setParticipated] = useState(0);\n  const [answered, setAnswered] = useState([]);\n  const [clicked, setClicked] = useState([]);\n  const [answeredCount, setAnsweredCount] = useState(0);\n  const currentVideo = video_url;\n  const [isloading, setIsLoading] = useState(true);\n  useEffect(() => {\n    if (isAuthenticated) {\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          func: 'getThisVideoStatus',\n          data: {\n            user_id: userData.user_id,\n            video_id: video_url\n          }\n        })\n      };\n      fetch(`${process.env.REACT_APP_API_URL_POST}`, requestOptions).then(response => response.json()).then(d => {\n        setIsLoading(false);\n\n        if (d.error === -1) {\n          history.push(\"/\");\n        } else {\n          if (d.error === 0) {\n            let answeredCountLocal = d.data.answer_count;\n            let scoreCountLocal = d.data.score_count;\n\n            if (scoreCountLocal !== \"\") {\n              setScore(parseInt(scoreCountLocal));\n            }\n\n            if (answeredCountLocal !== \"\") {\n              setAnsweredCount(parseInt(answeredCountLocal));\n\n              if (answeredCountLocal < questions.length) {\n                setCurrentQuestion(parseInt(answeredCountLocal));\n              } else {\n                setShowScore(true);\n              }\n            }\n          } else {\n            alert(\"Something Went wrong, please try again!\");\n          }\n        }\n      });\n      const requestOptionsTotal = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          func: 'getTotalScore',\n          data: {\n            user_id: userData.user_id\n          }\n        })\n      };\n      fetch(`${process.env.REACT_APP_API_URL_POST}`, requestOptionsTotal).then(response => response.json()).then(d => {\n        if (!d.error) {\n          setTotalScore(d.data.score_count);\n          setParticipated(d.data.participated);\n        }\n      });\n    }\n  }, [isAuthenticated, showScore, history]);\n\n  const handleAnswerOptionClick = answerOption => {\n    setClicked([...clicked, {\n      qtnindex: currentQuestion,\n      ansindex: answerOption.index\n    }]);\n\n    if (answerOption.isCorrect) {\n      setScore(score + 1);\n    }\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        func: 'save_answer',\n        data: {\n          user_id: userData.user_id,\n          question_id: currentQuestion + 1,\n          video_id: currentVideo,\n          answer: answerOption.index,\n          is_correct: answerOption.isCorrect\n        }\n      })\n    };\n    fetch(`${process.env.REACT_APP_API_URL_POST}`, requestOptions).then(response => response.json()).then(d => {\n      setAnsweredCount(answeredCount + 1);\n      const nextQuestion = currentQuestion + 1;\n      setAnswered([...answered, currentQuestion]);\n\n      if (nextQuestion < questions.length) {\n        setTimeout(function () {\n          setCurrentQuestion(nextQuestion);\n        }, 1000);\n      } else {\n        setTimeout(function () {\n          setShowScore(true);\n        }, 1000);\n      }\n    });\n  };\n\n  const AnswerButton = answerOption => {\n    let chkvarient = \"secondary\";\n\n    if (answered.indexOf(currentQuestion) > -1) {\n      if (answerOption.isCorrect) {\n        chkvarient = \"success\";\n      } else {\n        clicked.map(v => {\n          if (v.qtnindex === currentQuestion) {\n            if (v.ansindex === answerOption.index) {\n              chkvarient = \"danger\";\n            }\n          }\n        });\n      }\n    } else {\n      chkvarient = \"secondary\";\n    }\n\n    return /*#__PURE__*/React.createElement(Button, {\n      variant: chkvarient,\n      className: \"mb-2 w-100\",\n      onClick: () => handleAnswerOptionClick(answerOption),\n      disabled: answered.indexOf(currentQuestion) > -1 ? \"disabled\" : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }\n    }, \" \", answerOption.answerText, \" \");\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !isAuthenticated ? /*#__PURE__*/React.createElement(LoginPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 33\n    }\n  }) : isloading ? /*#__PURE__*/React.createElement(React.Fragment, null, \" Please Wait., Loading..!\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main col-md-6 d-flex align-items-center justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 21\n    }\n  }, showScore ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 33\n    }\n  }, \"You scored \", score, \" out of \", questions.length), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 33\n    }\n  }, \"Participated in \", participated), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 33\n    }\n  }, \"Total scored \", totalScore))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12 mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 41\n    }\n  }, \"Question \", currentQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 37\n    }\n  }, questions[currentQuestion].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 33\n    }\n  }, questions[currentQuestion].answerOptions.map((answerOption, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"w-100\",\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(AnswerButton, Object.assign({\n    index: i\n  }, answerOption, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 72\n    }\n  })))))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 21\n    }\n  })));\n};\n\nexport default QuizMain;","map":{"version":3,"sources":["/var/www/html/quiz-react/quiz-app/dwquiz/src/QuizMain.js"],"names":["React","useState","useEffect","useContext","AppContext","LoginPage","Button","useParams","useHistory","QuizMain","history","questions","questionText","answerOptions","answerText","isCorrect","video_url","isAuthenticated","userData","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","totalScore","setTotalScore","participated","setParticipated","answered","setAnswered","clicked","setClicked","answeredCount","setAnsweredCount","currentVideo","isloading","setIsLoading","requestOptions","method","headers","body","JSON","stringify","func","data","user_id","video_id","fetch","process","env","REACT_APP_API_URL_POST","then","response","json","d","error","push","answeredCountLocal","answer_count","scoreCountLocal","score_count","parseInt","length","alert","requestOptionsTotal","handleAnswerOptionClick","answerOption","qtnindex","ansindex","index","question_id","answer","is_correct","nextQuestion","setTimeout","AnswerButton","chkvarient","indexOf","map","v","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport AppContext from './libs/contextLib';\nimport LoginPage from './LoginPage';\nimport { Button } from 'react-bootstrap';\nimport { useParams, useHistory } from 'react-router-dom';\nconst QuizMain = () => {\n    let history = useHistory();\n    const questions = [\n        {\n            questionText: 'What is the capital of France?',\n            answerOptions: [\n                { answerText: 'New York', isCorrect: false },\n                { answerText: 'London', isCorrect: false },\n                { answerText: 'Paris', isCorrect: true },\n                { answerText: 'Dublin', isCorrect: false },\n            ],\n        },\n        {\n            questionText: 'Who is CEO of Tesla?',\n            answerOptions: [\n                { answerText: 'Jeff Bezos', isCorrect: false },\n                { answerText: 'Elon Musk', isCorrect: true },\n                { answerText: 'Bill Gates', isCorrect: false },\n                { answerText: 'Tony Stark', isCorrect: false },\n            ],\n        },\n        {\n            questionText: 'The iPhone was created by which company?',\n            answerOptions: [\n                { answerText: 'Apple', isCorrect: true },\n                { answerText: 'Intel', isCorrect: false },\n                { answerText: 'Amazon', isCorrect: false },\n                { answerText: 'Microsoft', isCorrect: false },\n            ],\n        },\n        {\n            questionText: 'How many Harry Potter books are there?',\n            answerOptions: [\n                { answerText: '1', isCorrect: false },\n                { answerText: '4', isCorrect: false },\n                { answerText: '6', isCorrect: false },\n                { answerText: '7', isCorrect: true },\n            ],\n        },\n    ];\n    const { video_url } = useParams();\n    const { isAuthenticated, userData } = useContext(AppContext);\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [showScore, setShowScore] = useState(false);\n    const [score, setScore] = useState(0);\n    const [totalScore, setTotalScore] = useState(0);\n    const [participated, setParticipated] = useState(0);\n    const [answered, setAnswered] = useState([]);\n    const [clicked, setClicked] = useState([]);\n    const [answeredCount, setAnsweredCount] = useState(0);\n    const currentVideo = video_url;\n    const [isloading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        if (isAuthenticated) {\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    func: 'getThisVideoStatus', data: {\n                        user_id: userData.user_id,\n                        video_id: video_url\n                    }\n                })\n            };\n            fetch(`${process.env.REACT_APP_API_URL_POST}`, requestOptions).then(response => response.json())\n                .then(d => {\n                    setIsLoading(false);\n                    if (d.error === -1) {\n                        history.push(\"/\");\n                    } else {\n                        if (d.error === 0) {\n                            let answeredCountLocal = d.data.answer_count;\n                            let scoreCountLocal = d.data.score_count;\n\n                            if (scoreCountLocal !== \"\") {\n                                setScore(parseInt(scoreCountLocal));\n                            }\n                            if (answeredCountLocal !== \"\") {\n                                setAnsweredCount(parseInt(answeredCountLocal));\n                                if (answeredCountLocal < questions.length) {\n                                    setCurrentQuestion(parseInt(answeredCountLocal));\n                                } else {\n                                    setShowScore(true);\n                                }\n                            }\n                        } else {\n                            alert(\"Something Went wrong, please try again!\");\n                        }\n                    }\n                });\n            const requestOptionsTotal = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    func: 'getTotalScore', data: {\n                        user_id: userData.user_id\n                    }\n                })\n            };\n            fetch(`${process.env.REACT_APP_API_URL_POST}`, requestOptionsTotal).then(response => response.json())\n                .then(d => {\n                    if (!d.error) {\n                        setTotalScore(d.data.score_count);\n                        setParticipated(d.data.participated);\n                    }\n                });\n        }\n    }, [isAuthenticated, showScore, history]);\n\n    const handleAnswerOptionClick = (answerOption) => {\n        setClicked([...clicked, { qtnindex: currentQuestion, ansindex: answerOption.index }]);\n        if (answerOption.isCorrect) {\n            setScore(score + 1);\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                func: 'save_answer', data: {\n                    user_id: userData.user_id,\n                    question_id: currentQuestion + 1,\n                    video_id: currentVideo,\n                    answer: answerOption.index,\n                    is_correct: answerOption.isCorrect\n                }\n            })\n        };\n        fetch(`${process.env.REACT_APP_API_URL_POST}`, requestOptions).then(response => response.json())\n            .then(d => {\n                setAnsweredCount(answeredCount + 1);\n                const nextQuestion = currentQuestion + 1;\n                setAnswered([...answered, currentQuestion]);\n                if (nextQuestion < questions.length) {\n                    setTimeout(function () { setCurrentQuestion(nextQuestion); }, 1000);\n                } else {\n                    setTimeout(function () { setShowScore(true); }, 1000);\n                }\n            });\n    };\n\n\n    const AnswerButton = (answerOption) => {\n        let chkvarient = \"secondary\";\n        if (answered.indexOf(currentQuestion) > -1) {\n            if (answerOption.isCorrect) {\n                chkvarient = \"success\";\n            } else {\n                clicked.map(v => {\n                    if (v.qtnindex === currentQuestion) {\n                        if (v.ansindex === answerOption.index) {\n                            chkvarient = \"danger\"\n                        }\n                    }\n                });\n            }\n\n        } else {\n            chkvarient = \"secondary\"\n        }\n        return (\n            <Button variant={chkvarient} className=\"mb-2 w-100\" onClick={() => handleAnswerOptionClick(answerOption)} disabled={(answered.indexOf(currentQuestion) > -1) ? \"disabled\" : \"\"}> {answerOption.answerText} </Button>\n        );\n    }\n    return (\n        <>\n            {!isAuthenticated ? <LoginPage /> : isloading ? <> Please Wait., Loading..!</> :\n                <div className='row w-100'>\n                    <div className='col-md-3'></div>\n                    <div className='main col-md-6 d-flex align-items-center justify-content-center'>\n\n                        {showScore ? (<>\n                            <div className='col-md-12 text-center'>\n                                <p>You scored {score} out of {questions.length}</p>\n                                <p>Participated in {participated}</p>\n                                <p>Total scored {totalScore}</p>\n                            </div>\n                        </>) : (<>\n                            <>\n                                <div className='col-md-12 mb-2'>\n                                    <div className=''>\n                                        <span>Question {currentQuestion + 1}</span>/{questions.length}\n                                    </div>\n                                    <div className=''>{questions[currentQuestion].questionText}</div>\n                                </div>\n                                <div className='col-md-12'>\n                                    {questions[currentQuestion].answerOptions.map((answerOption, i) => (\n                                        <div className=\"w-100\" key={i}><AnswerButton index={i} {...answerOption} /></div>\n                                    ))}\n                                </div>\n                            </>\n                        </>)}\n                    </div>\n                    <div className='col-md-3'></div>\n                </div>\n            }\n        </>\n    );\n}\nexport default QuizMain;"]},"metadata":{},"sourceType":"module"}