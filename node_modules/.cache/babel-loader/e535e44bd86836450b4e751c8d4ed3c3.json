{"ast":null,"code":"var _jsxFileName = \"/var/www/html/quiz-react/quiz-app/dwquiz/src/QuizMain.js\";\nimport React, { useContext } from 'react';\nimport AppContext from './libs/contextLib';\nimport LoginPage from './LoginPage';\n\nconst QuizMain = () => {\n  const questions = [{\n    questionText: 'What is the capital of France?',\n    answerOptions: [{\n      answerText: 'New York',\n      isCorrect: false\n    }, {\n      answerText: 'London',\n      isCorrect: false\n    }, {\n      answerText: 'Paris',\n      isCorrect: true\n    }, {\n      answerText: 'Dublin',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'Who is CEO of Tesla?',\n    answerOptions: [{\n      answerText: 'Jeff Bezos',\n      isCorrect: false\n    }, {\n      answerText: 'Elon Musk',\n      isCorrect: true\n    }, {\n      answerText: 'Bill Gates',\n      isCorrect: false\n    }, {\n      answerText: 'Tony Stark',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'The iPhone was created by which company?',\n    answerOptions: [{\n      answerText: 'Apple',\n      isCorrect: true\n    }, {\n      answerText: 'Intel',\n      isCorrect: false\n    }, {\n      answerText: 'Amazon',\n      isCorrect: false\n    }, {\n      answerText: 'Microsoft',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'How many Harry Potter books are there?',\n    answerOptions: [{\n      answerText: '1',\n      isCorrect: false\n    }, {\n      answerText: '4',\n      isCorrect: false\n    }, {\n      answerText: '6',\n      isCorrect: false\n    }, {\n      answerText: '7',\n      isCorrect: true\n    }]\n  }];\n  const {\n    video_url\n  } = useParams();\n  const {\n    isAuthenticated,\n    userData\n  } = useContext(AppContext);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [totalScore, setTotalScore] = useState(0);\n  const [participated, setParticipated] = useState(0);\n  const [answered, setAnswered] = useState([]);\n  const [clicked, setClicked] = useState([]);\n  const [answeredCount, setAnsweredCount] = useState(0);\n  const currentVideo = video_url;\n  const [isloading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        func: 'getThisVideoStatus',\n        data: {\n          user_id: userDataL.user_id,\n          video_id: video_url\n        }\n      })\n    };\n    fetch(\"/test/quiz_apis/post_requests.php\", requestOptions).then(response => response.json()).then(d => {\n      setIsLoading(false);\n\n      if (d.error == -1) {\n        history.push(\"/\");\n      } else {\n        if (d.error == 0) {\n          let answeredCountLocal = d.data.answer_count;\n          let scoreCountLocal = d.data.score_count;\n\n          if (scoreCountLocal !== \"\") {\n            setScore(parseInt(scoreCountLocal));\n          }\n\n          if (answeredCountLocal !== \"\") {\n            setAnsweredCount(parseInt(answeredCountLocal));\n\n            if (answeredCountLocal < questions.length) {\n              setCurrentQuestion(parseInt(answeredCountLocal));\n            } else {\n              setShowScore(true);\n            }\n          }\n        } else {\n          alert(\"Something Went wrong, please try again!\");\n        }\n      }\n    });\n    const requestOptionsTotal = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        func: 'getTotalScore',\n        data: {\n          user_id: userDataL.user_id\n        }\n      })\n    };\n    fetch(\"/test/quiz_apis/post_requests.php\", requestOptionsTotal).then(response => response.json()).then(d => {\n      if (!d.error) {\n        setTotalScore(d.data.score_count);\n        setParticipated(d.data.participated);\n      }\n    });\n  });\n\n  const AnswerButton = answerOption => {\n    let chkvarient = \"secondary\";\n\n    if (answered.indexOf(currentQuestion) > -1) {\n      if (answerOption.isCorrect) {\n        chkvarient = \"success\";\n      } else {\n        clicked.map(v => {\n          if (v.qtnindex === currentQuestion) {\n            if (v.ansindex === answerOption.index) {\n              chkvarient = \"danger\";\n            }\n          }\n        });\n      }\n    } else {\n      chkvarient = \"secondary\";\n    }\n\n    return /*#__PURE__*/React.createElement(Button, {\n      variant: chkvarient,\n      className: \"mb-2 w-100\",\n      onClick: () => handleAnswerOptionClick(answerOption),\n      disabled: answered.indexOf(currentQuestion) > -1 ? \"disabled\" : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, \" \", answerOption.answerText, \" \");\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !isAuthenticated ? /*#__PURE__*/React.createElement(LoginPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 33\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, \"(isloading) ? : \", /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 35\n    }\n  }, \"Please Wait, loading..!!\")), \" : \", /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main col-md-6 d-flex align-items-center justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 25\n    }\n  }, showScore ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 37\n    }\n  }, \"You scored \", score, \" out of \", questions.length), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 37\n    }\n  }, \"Participated in \", participated), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 37\n    }\n  }, \"Total scored \", totalScore))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12 mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 45\n    }\n  }, \"Question \", currentQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 41\n    }\n  }, questions[currentQuestion].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 37\n    }\n  }, questions[currentQuestion].answerOptions.map((answerOption, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"w-100\",\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(AnswerButton, Object.assign({\n    index: i\n  }, answerOption, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 76\n    }\n  })))))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 25\n    }\n  })))));\n};\n\nexport default QuizMain;","map":{"version":3,"sources":["/var/www/html/quiz-react/quiz-app/dwquiz/src/QuizMain.js"],"names":["React","useContext","AppContext","LoginPage","QuizMain","questions","questionText","answerOptions","answerText","isCorrect","video_url","useParams","isAuthenticated","userData","currentQuestion","setCurrentQuestion","useState","showScore","setShowScore","score","setScore","totalScore","setTotalScore","participated","setParticipated","answered","setAnswered","clicked","setClicked","answeredCount","setAnsweredCount","currentVideo","isloading","setIsLoading","useEffect","requestOptions","method","headers","body","JSON","stringify","func","data","user_id","userDataL","video_id","fetch","then","response","json","d","error","history","push","answeredCountLocal","answer_count","scoreCountLocal","score_count","parseInt","length","alert","requestOptionsTotal","AnswerButton","answerOption","chkvarient","indexOf","map","v","qtnindex","ansindex","index","handleAnswerOptionClick","i"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport AppContext from './libs/contextLib';\nimport LoginPage from './LoginPage';\nconst QuizMain = () => {\n    const questions = [\n        {\n            questionText: 'What is the capital of France?',\n            answerOptions: [\n                { answerText: 'New York', isCorrect: false },\n                { answerText: 'London', isCorrect: false },\n                { answerText: 'Paris', isCorrect: true },\n                { answerText: 'Dublin', isCorrect: false },\n            ],\n        },\n        {\n            questionText: 'Who is CEO of Tesla?',\n            answerOptions: [\n                { answerText: 'Jeff Bezos', isCorrect: false },\n                { answerText: 'Elon Musk', isCorrect: true },\n                { answerText: 'Bill Gates', isCorrect: false },\n                { answerText: 'Tony Stark', isCorrect: false },\n            ],\n        },\n        {\n            questionText: 'The iPhone was created by which company?',\n            answerOptions: [\n                { answerText: 'Apple', isCorrect: true },\n                { answerText: 'Intel', isCorrect: false },\n                { answerText: 'Amazon', isCorrect: false },\n                { answerText: 'Microsoft', isCorrect: false },\n            ],\n        },\n        {\n            questionText: 'How many Harry Potter books are there?',\n            answerOptions: [\n                { answerText: '1', isCorrect: false },\n                { answerText: '4', isCorrect: false },\n                { answerText: '6', isCorrect: false },\n                { answerText: '7', isCorrect: true },\n            ],\n        },\n    ];\n    const { video_url } = useParams();\n    const { isAuthenticated, userData } = useContext(AppContext);\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [showScore, setShowScore] = useState(false);\n    const [score, setScore] = useState(0);\n    const [totalScore, setTotalScore] = useState(0);\n    const [participated, setParticipated] = useState(0);\n    const [answered, setAnswered] = useState([]);\n    const [clicked, setClicked] = useState([]);\n    const [answeredCount, setAnsweredCount] = useState(0);\n    const currentVideo = video_url;\n    const [isloading, setIsLoading] = useState(true);\n    useEffect(() => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                func: 'getThisVideoStatus', data: {\n                    user_id: userDataL.user_id,\n                    video_id: video_url\n                }\n            })\n        };\n        fetch(\"/test/quiz_apis/post_requests.php\", requestOptions).then(response => response.json())\n            .then(d => {\n                setIsLoading(false);\n                if (d.error == -1) {\n                    history.push(\"/\");\n                } else {\n                    if (d.error == 0) {\n                        let answeredCountLocal = d.data.answer_count;\n                        let scoreCountLocal = d.data.score_count;\n\n                        if (scoreCountLocal !== \"\") {\n                            setScore(parseInt(scoreCountLocal));\n                        }\n                        if (answeredCountLocal !== \"\") {\n                            setAnsweredCount(parseInt(answeredCountLocal));\n                            if (answeredCountLocal < questions.length) {\n                                setCurrentQuestion(parseInt(answeredCountLocal));\n                            } else {\n                                setShowScore(true);\n                            }\n                        }\n                    } else {\n                        alert(\"Something Went wrong, please try again!\");\n                    }\n                }\n            });\n        const requestOptionsTotal = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                func: 'getTotalScore', data: {\n                    user_id: userDataL.user_id\n                }\n            })\n        };\n        fetch(\"/test/quiz_apis/post_requests.php\", requestOptionsTotal).then(response => response.json())\n            .then(d => {\n                if (!d.error) {\n                    setTotalScore(d.data.score_count);\n                    setParticipated(d.data.participated);\n                }\n            });\n    });\n    const AnswerButton = (answerOption) => {\n        let chkvarient = \"secondary\";\n        if (answered.indexOf(currentQuestion) > -1) {\n            if (answerOption.isCorrect) {\n                chkvarient = \"success\";\n            } else {\n                clicked.map(v => {\n                    if (v.qtnindex === currentQuestion) {\n                        if (v.ansindex === answerOption.index) {\n                            chkvarient = \"danger\"\n                        }\n                    }\n                });\n            }\n\n        } else {\n            chkvarient = \"secondary\"\n        }\n        return (\n            <Button variant={chkvarient} className=\"mb-2 w-100\" onClick={() => handleAnswerOptionClick(answerOption)} disabled={(answered.indexOf(currentQuestion) > -1) ? \"disabled\" : \"\"}> {answerOption.answerText} </Button>\n        );\n    }\n    return (\n        <>\n            {!isAuthenticated ? <LoginPage /> : <>\n                (isloading) ? : <><p>Please Wait, loading..!!</p></> : <>\n                    <div className='row w-100'>\n                        <div className='col-md-3'></div>\n                        <div className='main col-md-6 d-flex align-items-center justify-content-center'>\n\n                            {showScore ? (<>\n                                <div className='col-md-12 text-center'>\n                                    <p>You scored {score} out of {questions.length}</p>\n                                    <p>Participated in {participated}</p>\n                                    <p>Total scored {totalScore}</p>\n                                </div>\n                            </>) : (<>\n                                <>\n                                    <div className='col-md-12 mb-2'>\n                                        <div className=''>\n                                            <span>Question {currentQuestion + 1}</span>/{questions.length}\n                                        </div>\n                                        <div className=''>{questions[currentQuestion].questionText}</div>\n                                    </div>\n                                    <div className='col-md-12'>\n                                        {questions[currentQuestion].answerOptions.map((answerOption, i) => (\n                                            <div className=\"w-100\" key={i}><AnswerButton index={i} {...answerOption} /></div>\n                                        ))}\n                                    </div>\n                                </>\n                            </>)}\n                        </div>\n                        <div className='col-md-3'></div>\n                    </div>\n                </>\n            </>}\n        </>\n    );\n}\nexport default QuizMain;"]},"metadata":{},"sourceType":"module"}